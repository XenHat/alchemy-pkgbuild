build() {
  cd "${pkgname}" || exit 1
  source "${srcdir}/.venv/bin/activate"
  build_jobs=$(nproc)
  if [[ -z "$NO_SMART_JOB_COUNT" ]]; then
    if [[ ${build_jobs} -gt 1 ]]; then
      jobs=1
      # The viewer requires an average of 2GB of memory per core to link
      # Note: Behaviour change compared to the previous versions:
      # This script will no longer try to allocate build memory into swap
      # This is bad practice, and swap should be reserved to evict process
      # memory from physical ram to make place for the current workset.
      # This script will now try to check if swap is present and sufficent
      # for the current used memory to be stored in swap before allocating,
      # and will fallback to conservative allocation if swap is not available
      gigperlinkprocess=2
      mempercorekb=$((gigperlinkprocess * 1048576))
      requiredmemorykb=$(($(nproc) * mempercorekb))
      free_output="$(free --kilo --total | tail -n+2 | tr -s ' ')"
      physical_output=$(grep "Mem:" <<<"$free_output")
      #total_output=$(grep Total: <<< "$free_output")
      usedmemorykbphysical=$(cut -d ' ' -f 3 <<<"$physical_output")
      totalmemorykbphysical=$(cut -d ' ' -f 2 <<<"$physical_output")
      swap_output=$(grep Swap: <<<"$free_output")
      # Determine available swap space
      availableswapkb=0
      if [[ -n "$swap_output" ]]; then
        availableswapkb=$(cut -d ' ' -f 4 <<<"$swap_output")
      fi
      availablememorykbphysical=$(cut -d ' ' -f 7 <<<"$free_output")
      msg2 "Total memory:         $totalmemorykbphysical (includes swap)"
      msg2 "Available memory:     $availablememorykbphysical"
      msg2 "Required memory:      $requiredmemorykb"
      msg2 "Available physical memory on this system: $((availablememorykbphysical / 1024 / 1024)) GB"
      msg2 "Estimated required memory to build with all cores: $((requiredmemorykb / 1024 / 1024)) GB"
      if [[ ${requiredmemorykb} -gt ${availablememorykbphysical} ]]; then
        msg2 "Warning: Not enough available physical memory to build with all cores"
        if [[ ${usedmemorykbphysical} -lt ${availableswapkb} ]]; then
          # use all physical ram as swap will do its job
          msg2 "There is enough free swap to store the currently used memory"
          jobs=$(((totalmemorykbphysical / 1024 / 1024) / gigperlinkprocess))
        else
          # Not enough swap to hold ram contents, calculate manually
          msg2 "Allocating build jobs according to available physical memory ("$((availablememorykbphysical / 1024 / 1024))"/"$((requiredmemorykb / 1024 / 1024))"GB)..."
          # FIXME: Goes one iteration beyond what it should
          while [[ $((jobs * mempercorekb)) -lt ${availablememorykbphysical} ]]; do
            jobs=$((jobs + 1))
           msg2 "${jobs} jobs would consume $(((jobs * mempercorekb) / 1024 / 1024))GB"
          done
          # Back off one job count. Not sure why I have to do this but
          # the loop is doing one extra iteration.
          jobs=$((jobs - 1))
        fi
        build_jobs=${jobs}
        msg2 "Computed job count: ${build_jobs}"
      fi
      fi
      fi
      export AUTOBUILD_CPU_COUNT=$build_jobs
      AL_CMAKE_CONFIG=(
        -DLL_TESTS:BOOL=ON
        -DDISABLE_FATAL_WARNINGS=ON
        -DUSE_LTO:BOOL=OFF
        -DVIEWER_CHANNEL="Alchemy Test"
      )
      msg2 "BUILDENV: ${BUILDENV[*]}"
      if [[ " ${BUILDENV[*]} " =~ ' ccache ' ]] && command -v ccache; then
        msg2 "------ Will Use CCACHE ------"
        CMAKE_CXX_COMPILER_LAUNCHER="$(which ccache)"
        export CMAKE_CXX_COMPILER_LAUNCHER
      fi
      _logfile="${srcdir}/build.${CARCH}.$(date +%s).log"
      $prefix_cmd autobuild configure -A 64 -c ReleaseOS -- "${AL_CMAKE_CONFIG[@]}" | tee "$_logfile" 2>&1
      msg2 "Building with ${AUTOBUILD_CPU_COUNT} jobs (adjusted)"
      $prefix_cmd autobuild build -A64 -c ReleaseOS --no-configure | tee --append "${srcdir}/build.${CARCH}.$(date +%s).log" 2>&1
    }
